// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      Roles    @default(CUSTOMER)
  email     String   @unique
  password  String
  profile   Profile?
  trip      Trip[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  gender      Gender   @default(MALE)
  fullname    String?
  address     String?
  phoneNumber String?
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profile")
}

model Category {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  name      String              @unique
  slug      String?             @unique
  posts     CategoriesOnPlace[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("categories")
}

model Place {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String              @unique
  slug        String?
  address     String
  description String
  longitude   String
  latitude    String
  categories  CategoriesOnPlace[]
  images      imagesOnPlace[]
  trips       PlacesOnTrip[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("places")
}

model PlaceImages {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  place     imagesOnPlace[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("placeImages")
}

model imagesOnPlace {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  place        Place       @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId      String      @db.ObjectId
  image        PlaceImages @relation(fields: [placeImageId], references: [id], onDelete: Cascade)
  placeImageId String      @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("imagesOnPlace")
}

model CategoriesOnPlace {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  place      Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId    String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("categoriesOnPlace")
}

model Trip {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  slug          String?        @unique
  image         String?
  description   String
  price         Float
  startRegister DateTime
  endRegister   DateTime
  startTrip     DateTime
  endTrip       DateTime
  places        PlacesOnTrip[]
  tourGuideId   String         @map("tourGuide_id") @db.ObjectId
  tourGuide     User           @relation(fields: [tourGuideId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("trips")
}

model PlacesOnTrip {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String @db.ObjectId
  trip    Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId  String @db.ObjectId

  @@map("placesOnTrip")
}

enum Roles {
  ADMINISTRATOR
  TOUR_GUIDE
  CUSTOMER
}

enum Gender {
  MALE
  FEMALE
}
